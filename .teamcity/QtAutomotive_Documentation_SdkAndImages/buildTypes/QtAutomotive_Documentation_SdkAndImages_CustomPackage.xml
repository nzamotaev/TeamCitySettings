<?xml version="1.0" encoding="UTF-8"?>
<build-type xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" uuid="cd315f8e-d5f9-426d-8786-0f88aa7caa30" xsi:noNamespaceSchemaLocation="http://www.jetbrains.com/teamcity/schemas/10.0/project-config.xsd">
  <name>Custom package</name>
  <description />
  <settings>
    <disabled-settings>
      <setting-ref ref="RQ_52" />
      <setting-ref ref="RUNNER_113" />
    </disabled-settings>
    <parameters>
      <param name="package_names" value="" spec="text description='Build packages instead of image' label='Package' validationMode='any' display='normal'" />
      <param name="variant_name" value="intel-qtauto" />
    </parameters>
    <build-runners>
      <runner id="RUNNER_80" name="Get repo" type="simpleRunner">
        <parameters>
          <param name="script.content"><![CDATA[export PATH=$HOME/bin/:$PATH
echo "##teamcity[setParameter name='env.PATH' value='$PATH']"
test -x ~/bin/repo && exit 0

mkdir -p ~/bin
curl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
chmod a+x ~/bin/repo]]></param>
          <param name="teamcity.step.mode" value="default" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
      <runner id="RUNNER_79" name="Repo init" type="simpleRunner">
        <parameters>
          <param name="script.content" value="repo init -u ../pelux-manifests/ -m manifest.xml" />
          <param name="teamcity.build.workingDir" value="bitbake" />
          <param name="teamcity.step.mode" value="default" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
      <runner id="RUNNER_81" name="repo sync" type="simpleRunner">
        <parameters>
          <param name="script.content" value="repo sync" />
          <param name="teamcity.build.workingDir" value="bitbake" />
          <param name="teamcity.step.mode" value="default" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
      <runner id="RUNNER_106" name="Setup bitbake" type="simpleRunner">
        <parameters>
          <param name="script.content"><![CDATA[#!/bin/bash
echo "Setup bitbake %variant_name%"
mkdir -p $HOME/bitbake_downloads
mkdir -p $HOME/bitbake_sstate
mkdir -p build
if [ -d build/conf ]; then
    rm build/conf/*
fi
TEMPLATECONF="`pwd`/sources/meta-qtas-demo/conf/variant/%variant_name%" source sources/poky/oe-init-build-env `pwd`/build

cat > conf/site.conf << EOF

INHERIT += "own-mirrors"
SOURCE_MIRROR_URL ?= "file:///home/allview/bitbake_downloads/"

ICECC_PATH="/usr/bin/icecc"
ICECC_USER_CLASS_BL = " native"
#INHERIT +="icecc"
ICECC_USER_PACKAGE_BL = "libgcc gcc-runtime"
CONNECTIVITY_CHECK_URIS=""
#DL_DIR = "${HOME}/bitbake_downloads"
PACKAGE_CLASSES = "package_deb"
RM_OLD_IMAGE = "1"
IMAGE_INSTALL_append = " gnupg coreutils"

EOF]]></param>
          <param name="teamcity.build.workingDir" value="bitbake" />
          <param name="teamcity.step.mode" value="default" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
      <runner id="RUNNER_108" name="Build specific package" type="simpleRunner">
        <parameters>
          <param name="script.content"><![CDATA[#!/bin/bash


if [ -n "%package_names%" ]; then
    echo "##teamcity[progressStart 'Building packages for %variant_name% : %package_names%']"
    . sources/poky/oe-init-build-env build
    set -e
    bitbake %package_names%
    echo "##teamcity[progressFinish 'Building packages for %variant_name% : %package_names%']"
    echo "##teamcity[progressStart 'Updating package index']"
    bitbake package-index
    echo "##teamcity[progressFinish 'Updating package index']"
fi]]></param>
          <param name="teamcity.build.workingDir" value="bitbake" />
          <param name="teamcity.step.mode" value="default" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
      <runner id="RUNNER_112" name="Rsync sources directory" type="simpleRunner">
        <parameters>
          <param name="script.content" value="time rsync -trp build/downloads/ /home/allview/bitbake_downloads/" />
          <param name="teamcity.build.workingDir" value="bitbake" />
          <param name="teamcity.step.mode" value="execute_if_failed" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
      <runner id="RUNNER_113" name="Rsync sstate" type="simpleRunner">
        <parameters>
          <param name="script.content" value="time rsync -trp build/sstate-cache/ /home/allview/bitbake_sstate" />
          <param name="teamcity.build.workingDir" value="bitbake" />
          <param name="teamcity.step.mode" value="execute_if_failed" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
      <runner id="RUNNER_114" name="Rsync repo" type="simpleRunner">
        <parameters>
          <param name="script.content" value="time rsync -r -u --exclude 'x86_64*' build/tmp/deploy/deb/* /home/allview/bitbake_repo/deb/" />
          <param name="teamcity.build.workingDir" value="bitbake" />
          <param name="teamcity.step.mode" value="execute_if_failed" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
    </build-runners>
    <vcs-settings>
      <vcs-entry-ref root-id="QtAutomotive_HttpsGithubComPelagicorePeluxManifestsGit">
        <checkout-rule rule="+:. =&gt; pelux-manifests" />
      </vcs-entry-ref>
      <vcs-entry-ref root-id="QtAutomotive_GitGitPelagicoreNetUxteamMetaQtasDemoGit">
        <checkout-rule rule="+:.=&gt; meta-qtas-demo-dummy" />
      </vcs-entry-ref>
    </vcs-settings>
    <requirements>
      <contains id="RQ_44" name="teamcity.agent.jvm.os.name" value="Linux" />
      <equals id="RQ_52" name="system.hasIceCC" value="true" />
      <equals id="RQ_53" name="system.CanRunBitbake" value="true" />
    </requirements>
    <build-triggers />
    <build-extensions>
      <extension id="perfmon" type="perfmon">
        <parameters />
      </extension>
      <extension id="jetbrains.agent.free.space" type="jetbrains.agent.free.space">
        <parameters>
          <param name="free-space-work" value="50gb" />
        </parameters>
      </extension>
      <extension id="BUILD_EXT_13" type="BuildFailureOnMessage">
        <parameters>
          <param name="buildFailureOnMessage.conditionType" value="contains" />
          <param name="buildFailureOnMessage.messagePattern" value="ERROR:" />
          <param name="buildFailureOnMessage.reverse" value="false" />
        </parameters>
      </extension>
      <extension id="BUILD_EXT_17" type="BuildFailureOnMessage">
        <parameters>
          <param name="buildFailureOnMessage.conditionType" value="contains" />
          <param name="buildFailureOnMessage.messagePattern" value="Error:" />
          <param name="buildFailureOnMessage.reverse" value="false" />
        </parameters>
      </extension>
      <extension id="BUILD_EXT_26" type="JetBrains.SharedResources">
        <parameters>
          <param name="locks-param" value="Bitbake_directory writeLock" />
        </parameters>
      </extension>
    </build-extensions>
    <cleanup />
  </settings>
</build-type>

