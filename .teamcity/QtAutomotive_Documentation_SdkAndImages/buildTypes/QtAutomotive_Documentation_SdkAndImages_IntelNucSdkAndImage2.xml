<?xml version="1.0" encoding="UTF-8"?>
<build-type xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" uuid="6f534969-4305-47bd-b08c-c807beb9ef2e" xsi:noNamespaceSchemaLocation="http://www.jetbrains.com/teamcity/schemas/10.0/project-config.xsd">
  <name>Intel NUC SDK and Image 2</name>
  <description />
  <settings>
    <parameters>
      <param name="bitbake_image" value="core-image-pelux-qtauto-neptune" />
      <param name="package_names" value="" spec="text description='Build packages instead of image' label='Package' validationMode='any' display='normal'" />
      <param name="variant_name" value="intel-qtauto" />
    </parameters>
    <build-runners>
      <runner id="RUNNER_110" name="Groovy" type="simpleRunner">
        <parameters>
          <param name="script.content"><![CDATA[#!/bin/bash


function stage {
    echo "##teamcity[progressStart '$1']"
    cat 
    echo "##teamcity[progressFinish '$1']"
}

variant_name="intel-qtauto"
bitbake_image="core-image-pelux-qtas-demo-dev"
            
yoctoDir="/home/vagrant/pelux_yocto"
manifest="pelux.xml"
YOCTO_CACHE_URL="file:///home/vagrant/yocto-archive"
YOCTO_CACHE_ARCHIVE_PATH="/home/vagrant/yocto-archive"
echo "CACHE URL: ${YOCTO_CACHE_URL}"
echo "CACHE ARCHIVE PATH: ${YOCTO_CACHE_ARCHIVE_PATH}"

{
    rm -rf images || true
    rm -rf sdk || true
} | stage "Cleanup workspace"

{
    vagrant destroy -f || true
    vagrant up
} | stage "Start vagrant ${variant_name}"

vagrant ssh default -c "/vagrant/ci-scripts/do_repo_init ${manifest}"| stage "Repo init ${variant_name}"

templateconf="${yoctoDir}/sources//meta-qtas-demo/conf/variant/${variant_name}"
vagrant ssh default -c "/vagrant/vagrant-cookbook/yocto/initialize-bitbake.sh ${yoctoDir} ${templateconf}"| stage "Setup bitbake ${variant_name}"

vagrant ssh default -c "sed 's|%%CACHEURL%%|${YOCTO_CACHE_URL}|g' /vagrant/site.conf.in > ${yoctoDir}/build/conf/site.conf"

vagrant ssh default -c "/vagrant/vagrant-cookbook/yocto/fetch-sources-for-recipes.sh ${yoctoDir} ${bitbake_image}" |stage "Fetchall ${variant_name}"

{
    vagrant ssh default -c "/vagrant/vagrant-cookbook/yocto/build-images.sh ${yoctoDir} core-image-pelux-qtas-demo"
    vagrant ssh default -c "/vagrant/vagrant-cookbook/yocto/build-images.sh ${yoctoDir} core-image-pelux-qtas-demo-dev"
} | stage "Bitbake ${variant_name}"

vagrant ssh default -c "/vagrant/vagrant-cookbook/yocto/build-sdk.sh ${yoctoDir} ${bitbake_image}" | stage "Bitbake ${variant_name} SDK"

{
    #// Archive the downloads and sstate when the environment variable was set to true
    #// by the Jenkins job.
    vagrant ssh default -c "rsync -trpg ${yoctoDir}/build/downloads/ ${YOCTO_CACHE_ARCHIVE_PATH}/downloads/"
    vagrant ssh default -c "rsync -trpg ${yoctoDir}/build/sstate-cache/ ${YOCTO_CACHE_ARCHIVE_PATH}/sstate-cache"
} | stage "Archive cache ${variant_name}"

{
    vagrant ssh default -c "/vagrant/vagrant-cookbook/yocto/build-images.sh ${yoctoDir} package-index"
    vagrant ssh default -c "rsync -r -u --exclude 'x86_64*' ${yoctoDir}/build/tmp/deploy/rpm/* ${YOCTO_CACHE_ARCHIVE_PATH}/repo"
} | stage "Archive Package Repository ${variant_name}"

{
    vagrant ssh default -c "rsync -a ${yoctoDir}/build/tmp/deploy/images /vagrant/images"
    vagrant ssh default -c "rsync -a ${yoctoDir}/build/tmp/deploy/sdk /vagrant/sdk"
} | stage "Archive Artifacts ${variant_name}"

#archiveArtifacts artifacts: 'images/**', fingerprint: true
#archiveArtifacts artifacts: 'sdk/**', fingerprint: true]]></param>
          <param name="teamcity.step.mode" value="default" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
    </build-runners>
    <vcs-settings>
      <vcs-entry-ref root-id="QtAutomotive_HttpsGithubComPelagicorePeluxManifestsGit" />
    </vcs-settings>
    <requirements>
      <contains id="RQ_44" name="teamcity.agent.jvm.os.name" value="Linux" />
      <equals id="RQ_53" name="system.CanRunBitbake" value="true" />
    </requirements>
    <build-triggers>
      <build-trigger id="vcsTrigger" type="vcsTrigger">
        <parameters>
          <param name="branchFilter" value="+:master" />
          <param name="quietPeriodMode" value="DO_NOT_USE" />
        </parameters>
      </build-trigger>
    </build-triggers>
    <build-extensions>
      <extension id="perfmon" type="perfmon">
        <parameters />
      </extension>
      <extension id="jetbrains.agent.free.space" type="jetbrains.agent.free.space">
        <parameters>
          <param name="free-space-work" value="80gb" />
        </parameters>
      </extension>
      <extension id="BUILD_EXT_13" type="BuildFailureOnMessage">
        <parameters>
          <param name="buildFailureOnMessage.conditionType" value="contains" />
          <param name="buildFailureOnMessage.messagePattern" value="ERROR:" />
          <param name="buildFailureOnMessage.reverse" value="false" />
        </parameters>
      </extension>
      <extension id="BUILD_EXT_17" type="BuildFailureOnMessage">
        <parameters>
          <param name="buildFailureOnMessage.conditionType" value="contains" />
          <param name="buildFailureOnMessage.messagePattern" value="Error:" />
          <param name="buildFailureOnMessage.reverse" value="false" />
        </parameters>
      </extension>
    </build-extensions>
    <cleanup />
  </settings>
</build-type>

